-- Tests for async def and await (PEP 492)
-- ---------------------------------------

[case testAsyncDefPass]
# options: fast_parser
async def f() -> int:
    pass
[builtins fixtures/async_await.py]

[case testAsyncDefReturn]
# options: fast_parser
async def f() -> int:
    return 0
reveal_type(f())  # E: Revealed type is 'typing.Awaitable[builtins.int]'
[builtins fixtures/async_await.py]

[case testAwaitCoroutine]
# options: fast_parser
async def f() -> int:
    x = await f()
    return x
[builtins fixtures/async_await.py]

[case testAwaitDefaultContext]
# options: fast_parser
from typing import Any, TypeVar
T = TypeVar('T')
async def f(x: T) -> T:
    y = await f(x)
    reveal_type(y)
    return y
[out]
main: note: In function "f":
main:6: error: Revealed type is 'T`-1'

[case testAwaitAnyContext]
# options: fast_parser
from typing import Any, TypeVar
T = TypeVar('T')
async def f(x: T) -> T:
    y = await f(x)  # type: Any
    reveal_type(y)
    return y
[out]
main: note: In function "f":
main:6: error: Revealed type is 'Any'

[case testAwaitExplicitContext]
# options: fast_parser
from typing import Any, TypeVar
T = TypeVar('T')
async def f(x: T) -> T:
    y = await f(x)  # type: int
    reveal_type(y)
[out]
main: note: In function "f":
main:5: error: Argument 1 to "f" has incompatible type "T"; expected "int"
main:6: error: Revealed type is 'builtins.int'

[case testAwaitGeneratorError]
# options: fast_parser
from typing import Any, Iterator
def g() -> Iterator[Any]:
    yield
async def f() -> int:
    x = await g()
    return x
[out]
main: note: In function "f":
main: error: Incompatible types in await (actual type Iterator[Any], expected Awaitable)

[case testAwaitArgumentError]
# options: fast_parser
def g() -> int:
    return 0
async def f() -> int:
    x = await g()
    return x
[builtins fixtures/async_await.py]
[out]
main: note: In function "f":
main: error: Incompatible types in await (actual type "int", expected Awaitable)

[case testAwaitResultError]
# options: fast_parser
async def g() -> int:
    return 0
async def f() -> str:
    x = await g()
    return x
[builtins fixtures/async_await.py]
[out]
main: note: In function "f":
main:6: error: Incompatible return value type (got "int", expected "str")

[case testAsyncFor]
# options: fast_parser
from typing import AsyncIterator
class C(AsyncIterator[int]):
    async def __anext__(self) -> int: return 0
async def f() -> None:
    async for x in C():
        reveal_type(x)  # E: Revealed type is 'builtins.int*'
[builtins fixtures/async_await.py]
[out]
main: note: In function "f":

[case testAsyncWith]
# options: fast_parser
class C:
    async def __aenter__(self) -> int: pass
    async def __aexit__(self, x, y, z) -> None: pass
async def f() -> None:
    async with C() as x:
        reveal_type(x)  # E: Revealed type is 'builtins.int'
[builtins fixtures/async_await.py]
[out]
main: note: In function "f":

[case testNoYieldInAsyncDef]
# options: fast_parser
async def f():
    yield None
async def g():
    yield
async def h():
    x = yield
[builtins fixtures/async_await.py]
[out]
main: note: In function "f":
main:3: error: 'yield' in async function
main: note: In function "g":
main:5: error: 'yield' in async function
main: note: In function "h":
main:7: error: 'yield' in async function

[case testNoYieldFromInAsyncDef]
# options: fast_parser
async def f():
    yield from []
async def g():
    x = yield from []
[builtins fixtures/async_await.py]
[out]
main: note: In function "f":
main:3: error: 'yield from' in async function
main: note: In function "g":
main:5: error: 'yield from' in async function

[case testNoAsyncDefInPY2_python2]
# options: fast_parser
async def f():  # E: invalid syntax
    pass
